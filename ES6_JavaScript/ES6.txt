전체적인 ES6 복습은 여기서 하도록 하자
// https://jaeyeophan.github.io/categories/ECMAScript6/ //

자바스크립트 필기 및 개인 정리 내용

built in Object

    내장 객체를 의미한다.

객체

    자바스크립트에서 객체를 만드는 방법은 두가지 방법이 있다. 
    객체리터럴을 이용하거나 혹은 생성자를 이용한다.

    var objectMadeByLiteral = {};

    var objectMadeByConstructor = new Object();

프로토타입

    프로토타입을 이용하면 객체와 객체를 연결하고 한쪽 방향으로 상속을 받는 형태를 
    만들 수가 있다. 자바스크립트에서 객체와 객체를 연결해서 상속 받는다는 것은 
    다른 말로 객체와 객체를 연결해 멤버 함수나 멤버 변수를 공유 한다는 뜻이다. 
    이런 점을 이용해 자바스크립트에서는 상속과 비슷한 효과를 얻는 것이다.

    클래스의 상속을 흉내내려면 어떤 함수의 prototype 에 들어갈 
    객체가 원하는 __proto__ 를 갖고 있으면 됩니다. 
    자바스크립트에서 __proto__ 를 설정하는 유일한 방법은 new 연산자입니다. 
    한 마디로 하자면 자식이 될 함수의 prototype 에
    new 를 통해 부모 함수의 객체를 생성 할당하는 것 입니다.


*자바스크립트에서 함수는 객체다

    자바스크립트에서 함수는 일급 객체다. 즉 프로퍼티와 메서드를 가진다.

arguments

    arguments 객체는 모든 함수 내에서 이용 가능한 지역 변수입니다. 

    arguments 객체를 사용하여 함수 내에서 함수의 인수를 참조할 수 있습니다

toString() 함수

    어떠한 객체를 나타내는 문자열을 return한다.

includes() 

    인자로 써준 값이 문자열에 있으면 true를 반환한다.

filter() 메소드

    제공된 함수로 구현된 테스트를 통과하는 
    모든 요소가 있는 새로운 배열을 만듭니다.

Context (컨텍스트)의 의미

자바스크립트에서의 문자적인 컨텍스트라는 의미는 무엇인가?

    함수가 실행되거나 변수를 참조할 때의 환경을 말한다.

Call() 메소드

    구문

        fun.call([thisObj[, arg[, arg2[, ...]]]])

    매개 변수

        fun : 가져다쓸 메소드

        thisObj (선택 사항입니다) : 현재 객체로 사용될 객체
    
        arg1, arg2, argN (선택 사항입니다) : 메소드에 전달될 인수 목록

    설명

        call 메소드는 다른 객체 대신 메소드를 호출하는데 사용됩니다. 
        이 메서드를 사용하여 함수의 this 객체를 원래 컨텍스트에서 
        thisObj로 지정된 새 객체로 변경할 수 있습니다.


apply 함수

    구문

        fun.apply([thisObj[,argArray]])

    매개 변수
    
        fun : 가져다쓸 메소드

        thisObj (선택 사항입니다) : 현재 객체로 사용될 객체
        
        argArray : 함수에 전달될 인수 집합

call과 apply의 차이

    call 메소드와 동일 하나, call 메소드는 인자 하나 하나를, apply는 인자 리스트를 전달합니다.

bind 메소드

    bind() 메소드는 호출될 때 그 this 키워드를 제공된 값으로 설정하고 새로운 함수가 
    호출될 때 제공되는 주어진 순서의 선행 인수가 있는 새로운 함수를 생성합니다.

    ex)
        var module = {
            x: 42,
            getX: function() {
            return this.x;
            }
        }

        var unboundGetX = module.getX;
        console.log(unboundGetX()); // The function gets invoked at the global scope
        // expected output: undefined

        var boundGetX = unboundGetX.bind(module);
        console.log(boundGetX());
        // expected output: 42



자바스크립트 프로토타입의 모든 것

    https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67


Destructuring (어레이 디스트럭처링) (ES6)

    비구조화 또는 해체라고도 한다.

    구조화된 배열 또는 객체를 비구조화,파괴 하여 개별적인 변수에 할당하는 것이다.
    배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당하거나 반환할 때 유용하다.

    https://poiemaweb.com/es6-destructuring

WeakSet 과 Set 의 차이점 (ES6)

    Set과는 다르게 WeakSet은 객체의 집합이며 객체만 저장할 수 있다. 특정 type의 값을 저장할 수는 없다. 
    WeakSet은 약한 참조를 가진다. WeakSet내의 객체에 대한 참조는 약하게 연결이 되어 있다. 
    WeakSet내에 저장되어 있는 객체에 대한 참조가 없게되면 garbage collection 대상이되어 수거 된다. 
    따라서 현재 저장되어 있는 객체에 대한 목록은 없으며 WeakSet은 열거형이 아니다. 

WeakMap (ES6)

    WeakMap 객체는 키가 약하게 참조되는 키/값 쌍의 컬렉션입니다. 키는 객체여야만 하나 값은 임의 값이 될 수 있습니다.

    WeakMap 을 사용하는 이유?
        객체의 사적인 정보를 저장하기 위해서이거나 또는 상세 구현 내용을 숨기기 위한 것이다.
        즉 프로퍼티, 필드를 보호하기 위함


Math.random() 함수

    [0, 1) 범위(0을 포함하면서 1 보다는 작은)의 
    의사랜덤(pseudo-random) 수를 부동소수점(floating-point)으로 반환하고, 
    이를 원하는 범위로 스케일(scale)할 수 있다. 


*ES6에서는 키 : 밸류 , 이런식으로 만들지 않아도 오브젝트를 쉽게 만들 수 있다.


자바스크립트에서의 문자적인 컨텍스트라는 의미는 무엇인가?

    어떤 일이 일어나는 상황.
    함수가 실행되거나 변수를 참조할 때의 환경을 말한다.
    
every() 메소드

    배열의 모든 요소가 제공한 함수로 구현된 테스트를 통과하는지를 테스트합니다.

slice 메서드

    1. slice() 메소드는 어떤 배열의 begin부터 end까지(end는 불포함)에 대한 
       shallow copy를 새로운 배열 객체로 반환합니다. 
       원본 배열은 수정되지 않습니다.

        ex) slice(1,4)는 두번째 요소부터 네번째 요소까지 
            (1, 2 및 3을 인덱스로 하는 요소) 추출합니다.
            
            slice(begin, end)

                begin - 추출 시작점
                end - 추출을 종료할 0 기준 인덱스


    2. 호출하여 Array와 유사한 객체 / 컬렉션을 새 Array로 변환 할 수도 있습니다. 
       메서드를 객체에 바인딩하면됩니다.  (ES6 이전 방식)
    
Spread (ES6)

    이터러블 오브젝트(Iterable object)의 엘리먼트를 하나씩 분리하여 전개한다. 
    전개한 결과를 변수에 할당하거나 호출하는 함수의 파라미터 값으로 사용할 수 있다.

        let prev = [3,4];
        let post = [7,8];
        let spreadObj = [1, 2, ...prev, 5, 6, ...post, 9];
        console.log(spreadObj); // [1,2,3,4,5,6,7,8,9]

    문자열도 가능하다.

        let sObj = [..."javascript"];
        console.log(sObj); 
        // ["j", "a", "v", "a", "s", "c", "r", "i", "p", "t"]

Rest Parameter

    함수를 호출할 때 spread 연산자로 파라미터를 작성한 형태를 Rest parameter
    라고 한다. 
    Rest parameter는 Array, 즉 배열이므로 Array 오브젝트의 메서드를 사용할 수 있다. 
    그리고 arrow funtion에서도 사용 가능하다.


참고 : https://jaeyeophan.github.io/2017/04/18/ES6-4-Spread-Rest-parameter/


ES6 문법을 사용하는 이상, arguments는 필요하지 않다!
새로 도입된 Arrow function 때문이다! (ES6)

Rest parameter와 arguments의 차이

    arguments도 Array-like object(유사배열)이기 때문에 for statement로 
    전개할 수 있다. 하지만 Array 오브젝트의 메서드를 사용할 수 없다. 
    이것이 치명적인 단점인 것이다. 
    
    또 arrow function에서는 arguments를 사용할 수 없다. 이것으로 미루어보아, 
    ES6에서는 arguments를 사용하는 것을 최대한 자제하라는 느낌이다. 
    사실 Rest parameter에 익숙해지기만 하면 arguments를 통해 
    인자를 받는 것보다 유연한 코드를 작성할 수 있다.

    한 가지 더 한계점을 지적하자면 arguments는 함수 내부를 봐야 
    어느 부분에서 arguments 객체를 사용하는지 알 수 있어 코드의 가독성이 
    떨어지게 된다. 그렇기 때문에 arguments 대신 Rest parameter를 도입한 것이다.


-------------------------------------------

JavaScript 의 변수형을 알아내는 데는 일반적으로 typeof 를 사용한다.

다른 방법?

    변수형을 알아내는 다른 방법도 있다. 바로 .toString() 을 사용하는 것이다.

    toString.call()? 프로토타입의 객체를 call로 부른다.

    성능을 떠나서 객체 타입까지 손쉽게 알아낼 수 있다.

toString() ? 

    The toString() 은 문자열을 반환하는 object의 대표적인 방법이다

    toString() 함수는 어떠한 객체를 나타내는 문자열을 return한다.

    또한 객체 클래스를 검색하는 데에 사용된다.
    
--------------------------------------------

Object.create();

    지정된 프로토타입을 포함하고 선택적으로 지정된 속성을 포함하는 개체를 만듭니다.

    구문

        Object.create(prototype, descriptors)

    매개변수

        prototype 
            필수 요소.  프로토타입으로 사용할 개체입니다.   null일 수 있습니다.  

        descriptors
            선택 사항입니다.  하나 이상의 속성 설명자를 포함하는 
            JavaScript 개체입니다

----------------------------------------------

setPrototypeOf(obj, prototype) 리턴값은 생성된 특정 객체이다. (ES6)
    
    파라미터

    obj 프로토타입을 설정할 객체

    prototype 객체의 새로운 프로토 타입 (객체 or null)

* 프로토타입 체인을 연결해서 다른 객체의 메소드들을 연결하여 사용할 수 있다!
  자바스크립트에서는 객체모델들을 서로 프로토타입으로 체인을 맺을 수 있다.
  체인을 하고 싶으면 setPrototypeOf를 자연스럽게 쓰면 된다.

  찾고자 하는 메소드나 멤버 변수가 첫번째 프로토타입에 없으면 
  그 객체가 가지고 있는 하위 프로토타입을 타고 올라가서 메소드를 찾아낼 것이다.
  이미 만들어진 메소드를 재사용, 일종의 상속이다.

  Object.setPrototypeOf(넣을 객체 지정, 집어넣을 프로토 객체);

-----------------------------------------------

인터넷익스플로러를 포함한 대부분의 브라우저들이 지원하는 자바스크립트의 버전은 
ES5로 이보다 한단계 낮은 버전을 사용합니다. 
따라서 우리는 ES6혹은 그 이상 버전의 자바스크립트 코드들을 
ES5의 아래 버전 자바스크립트로 변환해 사용하는 방법을 사용할 수 있습니다.

Babel

    Babel은 최신 자바스크립트를 ES5버전에서도 돌아갈 수 있도록 변환(Transpiling)해줍니다. 
    우리가 자바스크립트 최신 버전의 멋진 기능을 이용하는 동안, 
    Babel이 다른 브라우저에서도 돌아갈 수 있도록 처리를 모두 해주는 것이죠!

        p.s 물론 Babel이 마법의 요술도구처럼 모든 최신 기능을 변환해주지는 못합니다. 
            하지만 아래 사진처럼 다양한 브라우저에 따라 최신 JavaScript문법 중 
            어떤 부분까지가 실행 가능한 범위인지 알려줍니다. 

Webpack

    ES6에서 새로 등장한 것 중 유용한 문법이 바로 import .. from ..구문입니다. 
    다른 언어에서의 import와 유사하게 경로(상대경로 혹은 절대경로)에서 
    js파일을 불러오는 방식으로 동작합니다.

    클래스 앞에 export를 해 주어야 다른 파일에서 import가 가능합니다.
    webpack으로 처리해야 export한 클래스를 import해와 
    새로운 인스턴스로 만들어 사용이 가능합니다.

webpack-dev-server

    webpack은 파일을 모아 하나의 js파일로 만들어줍니다.
    (보통 bundle.js라는 이름을 많이 씁니다.) 
    하지만 실제 개발중 js파일을 수정할 때마다 Webpack을 실행해 번들작업을 해준다면 
    시간도 많이 걸리고 매우 귀찮습니다. 이를 보완해 주는 패키지가 바로 webpack-dev-server
    인데, 이 패키지를 사용하면 실제 빌드를 해 bundle.js파일을 만들지 않아도 
    메모리 상에 가상의 bundle.js파일을 만들어 웹 사이트를 띄울때 자동으로 번들된 js파일을 
    띄워줍니다. 그리고 소스가 수정될 때 마다 업데이트된(번들링된) bundle.js파일로 띄워주고 
    화면도 새로고침 해줍니다!

    NOTE: webpack-dev-server는 build를 자동으로 해주는 것은 아닙니다. 
    단지 미리 지정해둔 경로로 접근할 경우 (실제로는 파일이 없지만) bundle.js파일이 
    있는 것처럼 파일을 보내주는 역할을 맡습니다. 개발이 끝나고 실제 서버에 배포할때는 
    이 패키지 대신 실제 webpack을 통해 빌드 작업을 거친 최종 결과물을 서버에 올려야 합니다.
    (개발할 때 사용하면 편한 패키지로 이해했다.)

웹 팩 설치하기(클래스 export, import 연결해주기)

    1. 우선 npm프로젝트를 생성해야 합니다. index.js파일을 만든 곳(어떤 폴더) 안에서 
       다음 명령어로 “이 폴더는 npm프로젝트를 이용하는 프로젝트다” 라는걸 알려주세요.

            npm init -y 
        
        이 명령어를 치면 폴더 안에 package.json파일이 생성된다.

            npm install webpack-cli

    2. 이제 다음 명령어로 Babel과 webpack등을 설치해 봅니다.

        # babel과 webpack은 개발환경에서 필요하기 때문에 --save-dev로 사용합니다.

            npm install --save-dev babel-loader babel-core babel-preset-env
            npm install --save-dev webpack webpack-dev-server
    
        babel-loader는 webpack이 .js 파일들에 대해 babel을 실행하도록 만들어주고, 
        babel-core는 babel이 실제 동작하는 코드이고, babel-preset-env는 babel이 동작할 때 
        지원범위가 어느정도까지 되어야 하는지에 대해 지정하도록 만들어주는 패키지입니다.
        이렇게 설치를 진행하고 나면 Babel과 Webpack을 사용할 준비를 마친셈입니다.

        NOTE: package.json뿐 아니라 package-lock.json파일도 함께 생길수 있습니다. 
        이 파일은 npm패키지들이 각각 수많은 의존성을 가지고 있기 때문에 의존성 패키지들을 
        다운받는 URL을 미리 모아둬 다른 컴퓨터에서 package.json을 통해 
        npm install로 패키지들을 설치시 훨씬 빠른 속도로 패키지를 받을 수 있도록 도와줍니다.

설정파일 건드리기

    package.json

        package.json파일은 파이썬 pip의 requirements.txt처럼 패키지버전 
        관리만 해주는 것이 아니라 npm와 결합해 특정 명령어를 실행하거나 npm 프로젝트의 
        환경을 담는 파일입니다.

            npm run 명령어이름

        위와 같은 명령어를 사용할 수 있도록 만들어 주기도 합니다.

        package.json파일을 열어 "scripts"부분을 다음과 같이 
        build와 devserver명령어를 추가해 줍시다.    
    
            "scripts": {
                "build": "webpack",
                "devserver": "webpack-dev-server --open --progress"
            },

        이제 여러분이 npm run build를 할 때는 webpack이 실행되고, 
        npm run devserver를 할 때는 개발용 서버가 띄워질거에요.

    
    webpack.config.js

        config.js 파일은 앞서 설치해준 webpack을 실행 시 어떤 옵션을 사용할지 
        지정해주는 js파일입니다.

        우리 프로젝트 폴더에는 아직 webpack.config.js 파일이 없을거에요. 
        package.json와 같은 위치에 webpack.config.js파일을 새로 만들어 
        아래 내용으로 채워줍시다.

            const webpack = require('webpack');
            const path = require('path');

            module.exports = {
                entry: './index.js',
                output: {
                    path: path.resolve(__dirname, 'dist'),
                    publicPath: '/dist/',
                    filename: 'bundle.js'
                },
                module: {
                    rules: [
                        {
                            test: /\.js$/,
                            include: path.join(__dirname),
                            exclude: /(node_modules)|(dist)/,
                            use: {
                                loader: 'babel-loader',
                                options: {
                                    presets: ['env']
                                }
                            }
                        }
                    ]
                }
            };

        위 파일은 entry에 현재 위치의 index.js 파일을 들어가 모든 
        import를 찾아오고, module -> rules -> include에 있는 .js로 된 
        모든 파일을 babel로 처리해줍니다.(exclude에 있는 부분인 
        node_modules폴더와 dist폴더는 제외합니다.)

    index.html

        사실 우리는 아직 번들링된 js파일을 보여줄 HTML파일이 없습니다! 
        우선 bundle.js를 보여주기만 할 단순한 HTML파일을 하나 만들어 봅시다.
        (index.js와 같은 위치)

        <!-- index.html -->
        <!DOCTYPE html>
        <html>
        <head>
            <title>NPM Webpack</title>
        </head>
        <body>
            Webpack용 HTML
            <script type="text/javascript" src="/dist/bundle.js"></script>
        </body>
        </html>

        webpack을 사용하지 않았다면 HTML파일 아래 script태그의 src에 
        index.js를 넣어야 하지만, 우리는 webpack과 webpack-dev-server를 
        사용하기 때문에 번들링된 파일의 위치인 /dist/bundle.js을 넣어줍니다.

    devserver 띄우기

        자, 이제 아래 명령어로 devserver를 띄워봅시다!

            npm run devserver

        브라우저의 개발자 도구를 열어보면 
        만들어놓은 콘솔로그창 출력 클래스 메소드가 있다면
        로그가 잘 찍힌걸 확인해 볼 수 있습니다.

        이제 여러분이 index.js파일이나 Profile.js등을 수정하면 
        곧바로 새로고침되고 새로운 bundle.js를 라이브로 불러올거에요.

    배포용으로 만들기

        여러분이 프로젝트 개발을 끝내고 실제 서버에 배포할 때는 devserver가 
        아니라 실제로 번들링된 파일인 bundle.js를 만들어야 합니다.

        아래 명령어로 현재 위치의 dist폴더 안에 bundle.js 파일을 만들어 줍시다.

            npm run build
        
        성공적으로 webpack이 마쳐쳤다면 여러분 프로젝트 폴더 안에 
        dist폴더가 생기고 그 안에 bundle.js파일이 생겼을 거에요.
    
        이제 여러분은 index.html파일과 dist폴더를 묶어 서버에 올리면 
        페이지가 잘 동작하는것을 확인할 수 있을거에요!

참고 : https://beomi.github.io/2017/10/18/Setup-Babel-with-webpack/


    환경이 개발인지 아니면 배포를 위함인지 명시해주자.

        module.exports = {
                mode : 'development',
                }

        개발 모드를 의미한다. 배포 모드는 production

모듈 사용 법

        하나의 파일에 하나의 클래스 형태를 만들고
        웹팩등을 사용하여 export , import 를 통해 모듈 의존성을 해결,
        번들로 묶어준다.

----------------------------------

- Framework(프레임워크)

    프레임워크는 Application 개발시 코드의 품질, 필수적인 코드, 알고리즘, 
    암호화, 데이터베이스 연동 같은 기능들을 어느정도 구성이 되어있는 뼈대(구조)를 
    제공하도록 만들어진걸 프레임워크라고합니다. 

    개발 구조나 설계 시 제공되는 인터페이스의 집합입니다. 
    완성된 어플리케이션은 아니지만 어느정도 프로그래머에게 제공된 프레임워크의 
    구조에서 어플리케이션을 개발해야합니다.

- Library(라이브러리)


라이브러리는 특정 기능에 대한 API(도구 / 함수)를 모은 집합을 라이브러리라고 합니다.

그 기능을 사용하기 위해 불러와서 호출하는 방식을 생각하시면 쉬울듯 합니다.

웹팩?

    es6기반의 코드는 import / export 지원이 잘 안되므로
    웹팩이라는 빌더를 통해 자동으로 의존관계를 파악하여
    js들을 불러와 번들.js라는 하나의 묶여진 파일로 배포하도록 도와준다.
    그 밖에 css파일들을 import해서 쓸 수 있게 한다던가,(해당 js코드에서)
    자바스크립트 코드를 webpack에서 babel 모듈을 불러와서
    코드를 transpiling 한다. (es6 -> es5)로 쓸 수 있게끔 변환해준다.


ES6 복습할 곳 http://12bme.tistory.com/186?category=682905



----------------------------------------

노드 프로젝트 만드는 법

1. npm init 통해 package.json 생성

2.  sudo npm install webpack --save-dev(개발모드)

    package.json에 코드가 추가된다.
        어떤? '이 노드 프로젝트에서는 웹팩이 필요해' 라는 것.

        다른 사람들이 이 package.json을 받아서 npm install을 하면
        package.json을 읽어서 관련된 모듈들을 설치하게 해준다.

3. package.json에서 webpack 실행설정
    npm의 run scripts에 넣어주자. (vi편집기로 수정)
    node_modules에 있는 것들을 찾아서 실행을 해줄 수가 있다.
    "start" : "webpack" 

4. webpack-cli를 설치해주자.

    cli 창에서 실행하기 위함이다. npm install webpack-cli

5. webpack.config.js 만들자.

    entry ? 노드 프로젝트 할 때 시작점이 되는 곳(빌드를 위해 뭘 바라보는가)
    output ? 결과파일. 
            filename : 내가 분석한 내용이 여기 들어가야되
            path : path.resolve(__dirname, 'dist')

            아웃풋은 index.js 에서 분석한 것들을 번들로 만들어서
            넣어주는 것이다. 의존관계를 전부 파악하여 웹팩이
            하나의 번들로 만들어준다.
    module : {
            rules : [{
                    어떤 필요한 include할 css들을 추가할 수 있음
            }]
    }

6. src폴더에 index.js 만들어주자.

7. index.html 파일을 만들고 <script src="./dist/bundle.js"></script>
    를 포함시켜주자.

    이제 번들.js를 인클루드 시킨 결과가 나오는지 확인한다.

    확인되었다면 이제 index.js 를 시작으로 자바스크립트 코딩을
    하면 된다.

이렇게 웹팩을 통한 빌드환경을 구성하였다.

필요한 이유? import, export를 통해 서로 다른 모듈 불러오기(ES6)
            그 외 babel 을 통해 트랜스파일링 (ES6->ES5).
            모바일 역시 babel을 써야 웹 브라우저에서 지원이 잘된다.

웹팩을 설치하고 webpack.config.js 가 반드시 필요하다.
이 파일을 분석하여 경로를 지정해주고 하는데 사용.
의존관계를 파악하는데 사용한다.

이러한 빌드 작업은 개발용으로 주기적으로 확인한다.
디버깅을 쉽게 하기 위해 파일 압축같은걸 안한다거나 할 수 있다.

배포단계에서는 실제 운영, 서비스 출시용으로 웹팩 설정을
다르게 해야한다. 치환시켜야되고 공백도 없애야되고 등등..
최적화된, 최소화된 파일을 만들어야 한다.


-------------------------------------------------------------

알아두면 좋을 지식 : Polyfill은 낡은 브라우저에서 
                    모던(modern) 코드를 쓸 수 있게 해주는 방법 
                    중 하나입니다.


브라우저의 ES6 지원 상황

    https://kangax.github.io/compat-table/es6/

브라우저의 ES6 지원 상황은 계속 변한다.

최근 브라우저에 맞게 transpiling 해줄래? babel 사용

bable-preset-env 

    옵션에서 targets 의 browsers 에서 last 2 versions 
    등을 써주면 최근의 버젼에 대해서만 지원이 된다. 라고 
    명시해 줄 수 있다.

Babel 설정

1. 설치(개발자 환경)

    npm install --save-dev babel-loader babel-core babel-preset-env
        (세개 모두 필요로 한다.)

2. module rules 의 test 에 정규표현식을 사용해서
    필요한 파일들을 인클루드 해줄 수 있다.

3.  브라우저의 최신버젼에서 이하 2버젼까지 지원하게 설정해보자.

    use:{
				loader : 'babel-loader',
				options : {
					presets : [['env', {
						'targets' : {
							'browsers' : ["last 2 versions"]
						}
					}]]
				}
			}
    를 추가해주자.

4. 모드설정을 해주자.
    webpack.config.js 에서
    
    module.exports = {
	    mode: 'development'
    }
    이렇게 추가해주면 된다.
    배포용이라면 production을 써주자.

5. 디버그설정을 하고싶다면??

    use:{
				loader : 'babel-loader',
				options : {
					presets : [['env', {
						'targets' : {
							'browsers' : ["last 2 versions"]
						},
                        "debug" : true
					}]]
				}
			}

6. 추가로 브라우저 지원을 늘리고 싶다면?

    use:{
				loader : 'babel-loader',
				options : {
					presets : [['env', {
						'targets' : {
							'browsers' : ["last 2 versions", "ie 9"]
						},
                        "debug" : true
					}]]
				}
			}

바벨 설정 끝!


-----------------------------

webpack-dev-server 와 html 구성

webpack-dev-server 란?

    개발단계에서 코드가 변경될 때마다
    새로고침을 빨리빨리 해주는 효율적인 서버이다.

1. 설치

    sudo npm install --save--dev webpack-dev-server

2. package.json 설정

    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "webpack",
        "devserver":"webpack-dev-server --inline"
    },

    여기서 inline은 전체 새로고침 해주는 옵션인데 기본값으로
    권장되는 옵션이다.

devserver같은 경우에는 publicPath 를 중요하게 생각하고 있다.
이미지등등 경로를 로더에서 쓸 때 불러오는 용으로 쓰는데,
dist에 있는 항목을 실제로 업데이트 하지 않고
메모리 공간에 서버가 가지고 있다가 그걸로 번들을 직접
생성하지 않고 임시적인 번들을 만들어서 화면에 보여주게 되어있다.
따라서 실제로 번들.js이 바뀌진 않는다.
물론 빌드된 결과는 실제 bundle.js 를 이용

아무튼 devserver(새로고침해주는 서버)를 사용하려면
publicPath를 최종 빌드한 번들 경로로 지정해줘야한다.
devserver는 publicPath를 중요하게 생각한다.


3. npm run devserver 

-------------------------------------

Ajax

    Ajax는 웹 페이지의 디자인 요소와 정보 요소를 분리한다. 
    처음 사이트에 접속하면 웹 서버는 해당 페이지의 스타일과 레이아웃을 
    정의하는 정적 HTML 파일과 CSS 파일, 그리고 데이터를 어떻게 요청하면 
    되는지를 설명한 JavaScript 파일을 전달한다. 
    
    브라우저는 일단 이 내용으로 페이지의 기본적인 골격을 구축해 놓는다. 
    그리고 골격의 구축이 끝나면 브라우저는 전달받은 JavaScript를 
    실행해서 서버에 데이터만을 별도로 요청한다. 
    이 때 서버에서 주는 응답은 순수한 데이터 객체 즉 XML 또는 JSON 
    데이터이다. 브라우저가 이 데이터를 수신하면 미리 만들어 둔 틀 안에 
    적절한 방법으로 데이터를 끼워 넣는다.

Ajax의 단점 및 보완 기술

    Ajax 는 비동기 데이터 전송 기술이지만 '양방향' 기술이 아니며 또한 
    '요청-응답' 사이클이 지나고 나면 통신 소켓을 닫아버린다는 문제가 있다. 
    따라서 완전한 실시간 통신을 지원하기 위해 웹 소켓이라는 새로운 기술이 
    구현되었다. 웹 소켓은 요청-응답 사이클이 지나도 통신 소켓을 닫지 않고 
    계속해서 요청을 송수신할 수 있도록 기존의 HTTP프로토콜에 약간의 
    변형을 가한다.

Ajax 참고

    http://jinbroing.tistory.com/157

--------------------------------

내장된 기능인 debugger 를 사용하여 디버거 해보기.

---------------------------------

Rest parameter와 arguments의 차이
arguments도 Array-like object이기 때문에 for statement로 전개할 수 있다. 하지만 Array 오브젝트의 메서드를 사용할 수 없다. 이것이 치명적인 단점인 것이다. 또 arrow function에서는 arguments를 사용할 수 없다. 이것으로 미루어보아, ES6에서는 arguments를 사용하는 것을 최대한 자제하라는 느낌이다. 사실 Rest parameter에 익숙해지기만 하면 arguments를 통해 인자를 받는 것보다 유연한 코드를 작성할 수 있다.

한 가지 더 한계점을 지적하자면 arguments는 함수 내부를 봐야 어느 부분에서 arguments 객체를 사용하는지 알 수 있어 코드의 가독성이 떨어지게 된다. 그렇기 때문에 arguments 대신 Rest parameter를 도입한 것이다.

* Rest parameter는 동적(dynamic)으로 생성된 파라미터라고 할 수 있기 때문에 함수의 length에서 포함되지 않는다. 
  기본적으로 함수의 length 프로퍼티는 파라미터의 개수를 의미한다.

--------------------------------

Array-like Object(유사배열)

    배열의 특징 중 하나는 index를 갖고 있어서 임의 접근(random access)가 가능하고, 그 index가 순차적으로 증가한다는 것이다. 
    만약 Object가 key값이 순차적으로 증가하는 값이고, 그에 따른 value가 존재한다고 했을 때, Array-like Object라고 한다.
    배열의 인덱스 값을 프로퍼티 key 값으로 사용하는 것이다. 그리고 length라는 프로퍼티 값을 갖고 있어서 전개를 할 때는 다음과 같이 한다.


    // Array-like object
    let arrLikeObj = {
        0 : "zero",
        1 : "one",
        2 : "two",
        length : 3
    };
    for (let i = 0; i < arrLikeObj.length; i++) {
        console.log(arrLikeObj[i]);
    }

Array-like Object는 다음 두 가지 규칙을 모두 만족시켜야 한다.

    1) 프로퍼티 값을 0부터 1씩 증가하면서 순차적으로 작성해야 한다.
    2) length를 프로퍼티 키로 하여 전체 프로퍼티 수를 작성해야 한다.

Rest parameter와 arguments의 차이

    arguments도 Array-like object이기 때문에 for statement로 전개할 수 있다. 하지만 Array 오브젝트의 메서드를 사용할 수 없다. 
    이것이 치명적인 단점인 것이다. 또 arrow function에서는 arguments를 사용할 수 없다. 이것으로 미루어보아, 
    ES6에서는 arguments를 사용하는 것을 최대한 자제하라는 느낌이다. 
    사실 Rest parameter에 익숙해지기만 하면 arguments를 통해 인자를 받는 것보다 유연한 코드를 작성할 수 있다.
    한 가지 더 한계점을 지적하자면 arguments는 함수 내부를 봐야 어느 부분에서 arguments 객체를 사용하는지 알 수 있어 
    코드의 가독성이 떨어지게 된다. 그렇기 때문에 arguments 대신 Rest parameter를 도입한 것이다.


Method Initializer Shorthand

    객체에 함수를 추가할 때, 객체의 프로퍼티에 익명 함수를 추가하는 방식을 사용했다. 
    ES6에서는 메소드를 활용한다. 비교를 위해 ES5도 함께 제시한다.

    ES5code>>

    function buildUser(first, last, postCount){
        return {
            isActive : function( ) {
                //...
            }
        }
    }

    ES6code>>

    function buildUser(first, last, postCount){
        return {
            isActive( ) {
                //...
            }
        }
    }


Destructuring Assignment

    오른쪽의 배열을 분할하여 왼쪽 변수에 값을 할당한다. 인덱스 번째의 엘리먼트 값을 인덱스 번째의 변수에 할당하는 것이다. 
    엘리먼트가 아직 남았는데 할당할 변수가 없다면 그대로 할당되지 않고, 엘리먼트가 남지 않았는데 할당한 변수가 있다면 
    그 변수는 undefined로 할당된다.

    let one, two, three, four;

    //case1

    [one, two] = [1, 2];
    console.log(one); //1
    console.log(two); //2

    //case2

    [one, two, three] = [1, 2];
    console.log(one); //1
    console.log(two); //2
    console.log(three);//undefined


* 이전 Chapter에서 다뤘던 Spread 연산자를 사용할 수 있으며, 공백으로 두어 해당 값을 건너 뛰고 할당할 수 있다.

    [one, ...other] = [1, 23, 24, 25];
    console.log(one); //1
    console.log(other); //[23, 24, 25]

    [one, , , four] = [1, 2, 3, 4];
    console.log(one); //1
    console.log(four); //4

Default Value

    destructuring을 통해 값을 할당할 때, 해당하는 값이 없을 때, undefined 대신 할당할 default value를 지정해줄 수 있다.


    let [first, second, third = 3] = [1, 2];
    console.log(first); //1 by destructuring
    console.log(second); //2 by destructuring
    console.log(third); //3 by default value

    let [fourth, fifth, sixth = 6] = [4, 5, 66];
    console.log(fourth); //4 by destructuring
    console.log(fifth); //5 by destructuring
    console.log(sixth); //66 by destructuring

arrow function

    암묵적으로 return

    // 매개변수 지정 방법
        () => { ... } // 매개변수가 없을 경우
        x => { ... } // 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.
        (x, y) => { ... } // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.

    // 함수 몸체 지정 방법
        x => { return x * x }  // single line block
        x => x * x             // 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.

        () => { return { a: 1 }; }
        () => ({ a: 1 })  // 위 표현과 동일하다. 객체 반환시 curly bracket을 사용한다.

    () => {           // multi line block.
        const x = 10;
        return x * x;
        };


ES6에서는 프로퍼티 값으로 변수를 사용하는 경우, 프로퍼티 이름을 생략(Property shorthand)할 수 있다. 
이때 프로퍼티 이름은 변수의 이름으로 자동 생성된다.

    // ES6
    let x = 1, y = 2;

    const obj = { x, y };

    console.log(obj); // { x: 1, y: 2 }


메소드 축약 표현

    ES5에서 메소드를 선언하려면 프로퍼티의 값으로 함수 선언식을 사용한다.

        // ES5

        var obj = {
            name: 'Lee',
            sayHi: function() {
                console.log('Hi! ' + this.name);
            }
        };

    obj.sayHi(); // Hi! Lee

    ES6에서는 메소드를 선언할 때, function 키워드를 생략한 축약 표현을 사용할 수 있다.

        // ES6

        const obj = {
            name: 'Lee',
            // 메소드 축약 표현
            sayHi() {
                console.log('Hi! ' + this.name);
            }
        };

    obj.sayHi(); // Hi! Lee

WebSocket

    http://utk-unm.blogspot.com/2016/10/websocket.html

Default Parameter

    parameter에 값이 넘어가지 않아도, default value로 설정된 값이 해당 파라미터 대신 값이 할당된다. parameter에서도 마찬가지로 기존의 default value는 undefined 값이었지만, 그 값을 코드 상에서 설정할 수 있게 된 것이다.

        let somethingFunction = (prev, post = 20) => prev + post;
        console.log(somethingFunction(1)); //21 by default parameter
        console.log(somethingFunction(1, 2)); //3
        console.log(somethingFunction(1, undefined)); //21 by default parameter
        console.log(somethingFunction(1, null)); //1

    함수에도 length라는 property가 따로 존재한다. 그런데 이 때, default parameter는 length에서 무시된다.

        getTotal(100); //1
        getTotal(100, 0.05); //2
        console.log(getTotal.length); //1


---------------------------------------------

Node.js 에서 모듈을 만들 때는 module.exports 를 사용한다.
객체를 만들어서 내보내고 싶은 것을 넣고 통째로 export 하는 식으로 쓰인다.
require를 하게되면 객체를 통째로 가져오기 때문에 . 접근자로 접근해야한다.

조금 다른 방법으로 export 객체를 사용하는 방법이 있다.

사실 exports는 module.exports 와 같다.
참조 관계이기 때문.
주로 module.exports 는 한 번에 export 할 때 사용하고, 
exports는 여러 개의 객체를 따로 export할 때 사용한다.

module.exports에서 exports 자체에 절대 다른 값을 대입하면 안된다.
항상 exports 객체의 속성에 값을 넣어주어야 한다.

exports = divide; 이런식으로 자체에 값을 대입하는 순간 모듈로서의 의미가 꺠지게 된다.
exports는 module.exports를 참조하고 있는데 다른 것을 대입해버리면 참조 관계가 깨지기 때문.

* 웹팩으로 하면 require나 import 중에 자유롭게 고를 수도 있다.
  웹팩으로 나온 output 파일을 script src로 html에 붙이면 된다.

export

	주로 module.exports는 한 번에 export할 때 사용하고, exports는 여러 개의 객체를 따로 export할 때 사용합니다. 문법적 특성 때문입니다.

export default

	default로 export한 친구는 괄호를 사용하지 않아도 import 할 수 있다.
	그리고 import 할 때 변수명도 마음대로 받을 수 있다.

	default가 붙지 않은 채로 export한 친구들은 이름 그대로 import 해야 하고, 괄호 안에서 불러와야 한다.
	
Default exports
	
	You can only have one default export per module.
		
	export default class Dog {
		bark() {
			console.log('bark!');
		}
	}
	
import
		
		
	
	
as 키워드

	import 할 때 괄호 안의 변수도 이름을 바꾸고 싶다면, as라는 키워드를 사용해 바꿀 수 있다.
	두개 이상의 패키지에서 같은 변수 이름을 사용해 변수가 겹칠 때, 이름을 바꿀 수 있어 유용하다.
	
어떤 값이든 export, import 가 가능하다.

	문자열, 불린, 객체, 배열, 함수 등 전달할 수 있는 값이면 다 가능하다.
	ex) import { render } from 'react-dom'; 에서 render은 함수입니다.

* 이란 것도 있다.

	export한 모든 것들을 다 모아서 import 해준다
	
	ex) import * as namespace form './Example';


babel

자바스크립트 컴파일러. 옛날 브라우저나 현재 브라우저에 알맞게 ECMAScript 2015+ 버젼으로 변경해준다.

babel-polyfill
바벨을 사용하면 새로운 문법을 구형 자바스크립트 문법으로만 바꿔줍니다. 문법만 바꿔주면 됐지 뭘 더 바라냐고요? 바벨 그 자체로는 ES2015의 새로운 객체(Promise, Map, Set 등등)과 메소드(Array.find, Object.assign 등등)을 사용할 수 없습니다. 왜냐하면 ES2015에서 처음 생긴 거라 구형 자바스크립트에는 그에 상응하는 코드가 없거든요. 그래서 babel-polyfill을 설치해야 새로운 기능을 사용할 수 있습니다.
