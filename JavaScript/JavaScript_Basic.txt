======================================


자바스크립트의 동적 타이핑

자바스크립트는 느슨한 타입 (loosely typed) 언어, 혹은 동적 (dynamic) 언어이다.
그 말은, 변수의 타입을 미리 선언할 필요가 없다는 뜻이다.
타입은 프로그램이 처리되는 과정에서 자동으로 파악될 것이다. 또한 그 말은 같은 변수에 여러 타입의 값을 넣을 수 있다는 뜻이다.





1. 자바스크립트 data 자료형(type) 종류

기본 자료형 (Primitive) 인 여섯가지 데이터 타입

Boolean - Boolean 은 논리적인 요소를 나타내고, true 와 false 의 두 가지 값을 가질 수 있다.

Null - Null 타입은 딱 한 가지 값, null 을 가질 수 있다. 더 알아보려면 null 와 Null 을 보라.

Undefined - 값을 할당하지 않은 변수는 undefined 값을 가진다. 더 알아보려면 undefined 와 Undefined 을 보라.

	    이 세 가지 타입은 상수이므로, 이것들로 다른 오브젝트를 표현할 수 없다.

Number - 숫자타입

String - 자바스크립트의 String 타입은 텍스트 데이터를 나타내는데 사용한다.
	 이는 16비트 부호없는 정수 값 요소들의 집합이다. String의 각 요소는 String의 위치를 차지한다.
	 첫 번째 요소는 0번 인덱스에 있고, 다음 요소는 1번, 그 다음 요소는 2번... 같은 방식이다.
	 String 의 길이는 String이 가지고있는 요소의 갯수이다.

Symbol (ECMAScript 6 에 추가됨) - Symbol은 유일하고 변경 불가능한 (immutable) 기본값 (primitive value) 이다.
			 	  또한, 객체 속성의 key 값으로도 사용될 수 있다.
				  몇몇 프로그래밍 언어에서는 Symbol을 atom 이라고 부른다.

별도로 Object 도 있음



2. 자바스크립트 상수란

	변수는 값을 저장하기 위해 가장 넓리 쓰이기 때문에 아시겠지만 상수는 모르시는 분들이 있을 것입니다.
	이 상수는 변수와 다른 차이점을 가지는데요. 가장 큰 차이점이라면 상수는 변수와 달리 한번 설정하면 read only
	읽기만 하는 자료형을 말합니다. 다시말해 한 번 설정하면 절대 변하지 않는 값입니다.
	그래서 가끔은 변수의 선언보다 상수가 더 유용할 수도 있죠.
	일반적으로 웹페이지 안에서 변하지 않는 값들에 대하여 상수 선언을 합니다.

	const test = 100; // 상수를 선언하는 방법

	var test2 = 100; // 변수를 선언하는 방법

	상수로 설정하는 것들

		1. 페이지 url
		2. 페이지 파라미터(쿼리스트링)
		3. 고객 정보 등 외부에서 입력된 값(id, password, key value)
		4. 원주율 및 기타 수학 공식 등

3. 자바스크립트 내장객체에 대해서 정리

	JS에는 기본으로 정의된 내장 객체(built-in object)가 있고,
	사용자가 만들어서 작성하는 사용자 정의 객체(custom object)가 있다.



	Object 객체 : 	자바스크립트의 가장 기본적인 내장 객체는 Object 생성자 함수로 만든 인스턴스이다.	\
			자바스크립트의 모든 기본 내장 객체는 Object 객체를 기본으로 만든다.
	Number 객체
	String 객체
	Array 객체
	Date 객체
	Function 객체 : Function 객체는 함수의 내용을 객체로 정의하는 자바스크립트의 내장객체이다.

			함수는 자바스크립트뿐만 아니라 대부분의 프로그래밍 언어에서 핵심이다.
			그리고 자바스크립트의 함수는 조금 더 강력하다.
			자바스크립트의 함수는 그냥 객체 지향도 가능한 일급 함수다.
			좋게 생각하면 함수는 여러 기능과 기법을 활용할 수 있도록 잘 디자인된 객체라고 할 수 있지만,
			나쁘게 생각하면 함수는 너무 복잡하고 뭔가 막 뭐가 참 많다.
			그리고 기능이 많은 만큼 의도하지 않은 동작을 하기도 한다.
			ECMAScript 6+
			ECMAScript 6, 그리고 그 이후 명세에서 함수는 계속 강력해지고 있다.
			추가되는 여러 특징으로 인해 그동안 힘겹게 이해하고 활용했던 몇몇 함수의 동작과 기법은
			이제 구식이 됐다.

			그래서 함수 객체란?

			ECMAScript에서 함수 객체란 서브루틴(Subroutine)으로 수행될 수 있는 객체를 말한다.
			동작을 나타내는 실행 코드와 상태를 포함하고 있으며 객체 지향의 생성자 역할도 할 수 있있다.
			그리고 기본적으로 자바스크립트의 일반적인 객체(Ordinary object)와 동일한 동작을 할 수 있다.
			(정확히는 Ordinary object의 Internal slot과 Interal method를 모두 가지고 있다).

			즉, ECMAScript 함수는 일반 객체의 확장이며, 함수로 동작하기 위한 추가적인 기능을 가지고 있다.





	Math 객체 : Math 객체는 자바스크립트의 기본 내장 객체 중 유일하게 생성자 함수를 사용하지 않는 객체이다.
		    Math 객체의 메서드로 넘겨진 모든 매개변수는 종류에 관계 없이 모두 숫자로 변환한다.

======================================

typeof 연산자는 피연산자의 타입을 가리키는 문자열을 반환합니다.
